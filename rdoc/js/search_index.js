var search_data = {"index":{"searchIndex":["activesupport","testcase","applicationcontroller","applicationhelper","browsingtest","controllerhelpers","createproposals","createreviews","devisecreateusers","htmlselectorshelpers","isitfeasible","application","navigationhelpers","object","proposal","proposalscontroller","proposalshelper","review","reviewscontroller","reviewshelper","user","usercontroller","userhelper","withinhelpers","after_sign_in_path_for()","change()","change()","change()","create()","create()","destroy()","destroy()","edit()","edit()","get_reviews()","get_reviews()","has_reviews?()","has_reviews?()","index()","index()","new()","new()","path_to()","require_user_to_be_business!()","require_user_to_be_engineering!()","selector_for()","show()","show()","sign_in()","test_homepage()","update()","update()","user_has_no_review_here()","user_is_business?()","user_is_engineering?()","user_is_owner_of_proposal?()","user_is_owner_of_review?()","with_scope()","gemfile","notestoinstructor","readme","rakefile","readme_for_app","robots"],"longSearchIndex":["activesupport","activesupport::testcase","applicationcontroller","applicationhelper","browsingtest","controllerhelpers","createproposals","createreviews","devisecreateusers","htmlselectorshelpers","isitfeasible","isitfeasible::application","navigationhelpers","object","proposal","proposalscontroller","proposalshelper","review","reviewscontroller","reviewshelper","user","usercontroller","userhelper","withinhelpers","applicationcontroller#after_sign_in_path_for()","createproposals#change()","createreviews#change()","devisecreateusers#change()","proposalscontroller#create()","reviewscontroller#create()","proposalscontroller#destroy()","reviewscontroller#destroy()","proposalscontroller#edit()","reviewscontroller#edit()","proposal#get_reviews()","reviewscontroller#get_reviews()","proposal#has_reviews?()","proposalshelper#has_reviews?()","proposalscontroller#index()","reviewscontroller#index()","proposalscontroller#new()","reviewscontroller#new()","navigationhelpers#path_to()","applicationcontroller#require_user_to_be_business!()","applicationcontroller#require_user_to_be_engineering!()","htmlselectorshelpers#selector_for()","proposalscontroller#show()","reviewscontroller#show()","controllerhelpers#sign_in()","browsingtest#test_homepage()","proposalscontroller#update()","reviewscontroller#update()","reviewshelper#user_has_no_review_here()","applicationcontroller#user_is_business?()","applicationcontroller#user_is_engineering?()","proposalshelper#user_is_owner_of_proposal?()","reviewshelper#user_is_owner_of_review?()","withinhelpers#with_scope()","","","","","",""],"info":[["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["BrowsingTest","","BrowsingTest.html","",""],["ControllerHelpers","","ControllerHelpers.html","",""],["CreateProposals","","CreateProposals.html","",""],["CreateReviews","","CreateReviews.html","",""],["DeviseCreateUsers","","DeviseCreateUsers.html","",""],["HtmlSelectorsHelpers","","HtmlSelectorsHelpers.html","","<p>TL;DR: YOU SHOULD DELETE THIS FILE\n<p>This file is used by web_steps.rb, which you should also delete\n<p>You …\n"],["IsItFeasible","","IsItFeasible.html","",""],["IsItFeasible::Application","","IsItFeasible/Application.html","",""],["NavigationHelpers","","NavigationHelpers.html","","<p>TL;DR: YOU SHOULD DELETE THIS FILE\n<p>This file is used by web_steps.rb, which you should also delete\n<p>You …\n"],["Object","","Object.html","",""],["Proposal","","Proposal.html","","<p>Class proposals exists to store the appropriate data for proposals of\nbusiness students\n"],["ProposalsController","","ProposalsController.html","",""],["ProposalsHelper","","ProposalsHelper.html","",""],["Review","","Review.html","","<p>Class review exists to store the appropriate data for reviews of proposals\n"],["ReviewsController","","ReviewsController.html","",""],["ReviewsHelper","","ReviewsHelper.html","",""],["User","","User.html","",""],["UserController","","UserController.html","",""],["UserHelper","","UserHelper.html","",""],["WithinHelpers","","WithinHelpers.html","",""],["after_sign_in_path_for","ApplicationController","ApplicationController.html#method-i-after_sign_in_path_for","(resource)","<p>Method to override devise gem default method Change path redirect for\npost-sign-in\n<p>Parameters: Resource …\n"],["change","CreateProposals","CreateProposals.html#method-i-change","()",""],["change","CreateReviews","CreateReviews.html#method-i-change","()",""],["change","DeviseCreateUsers","DeviseCreateUsers.html#method-i-change","()",""],["create","ProposalsController","ProposalsController.html#method-i-create","()","<p>Method to create new proposal\n<p>Validates user signed in and business user If validation fails, redirects …\n"],["create","ReviewsController","ReviewsController.html#method-i-create","()","<p>Method to create new revies Renders form\n"],["destroy","ProposalsController","ProposalsController.html#method-i-destroy","()","<p>Method to delete proposal\n<p>Parameters: Proposal ID\n<p>Verifies user is logged in and owns proposal If verification …\n"],["destroy","ReviewsController","ReviewsController.html#method-i-destroy","()","<p>Method to delete review Validates user is owner of review If validation\nfails, redirects to root\n"],["edit","ProposalsController","ProposalsController.html#method-i-edit","()","<p>Method to render edit form for a specfic proposal\n<p>Parameters: proposal id\n<p>Validates user is logged in and …\n"],["edit","ReviewsController","ReviewsController.html#method-i-edit","()","<p>Method to call edit on review Renders form Validates calling user owns\nreview\n"],["get_reviews","Proposal","Proposal.html#method-i-get_reviews","(proposal_id)","<p>Get reviews associate with a proposal\n<p>Parameters: Proposal ID\n<p>Returns: Hash with reviews\n"],["get_reviews","ReviewsController","ReviewsController.html#method-i-get_reviews","()","<p>Method to get a hash of reviews by the proposal id Paremeters: proposal id\nReturns: hash of reviews\n"],["has_reviews?","Proposal","Proposal.html#method-i-has_reviews-3F","(proposal_id)","<p>Check if proposal has reviews associated with it\n<p>Parameters: Proposal ID\n<p>Returns: True if there are reviews …\n"],["has_reviews?","ProposalsHelper","ProposalsHelper.html#method-i-has_reviews-3F","(proposal_id)","<p>Method to check if a proposal has review or not\n<p>Parameters: Proposal ID\n<p>Returns: True if review(s) exist …\n"],["index","ProposalsController","ProposalsController.html#method-i-index","()","<p>Method to show all proposals in the view If user is business only show the\nproposals owned by the user …\n"],["index","ReviewsController","ReviewsController.html#method-i-index","()","<p>Method to get list of reviews Index of reviews only return for engineering\nstudents Reviews returned …\n"],["new","ProposalsController","ProposalsController.html#method-i-new","()","<p>Method to create new proposal Validates user signed in and business user\n<p>If validation fails, redirects …\n"],["new","ReviewsController","ReviewsController.html#method-i-new","()","<p>Method to create new review Renders form by default\n"],["path_to","NavigationHelpers","NavigationHelpers.html#method-i-path_to","(page_name)","<p>Maps a name to a path. Used by the\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">When</span> <span class=\"ruby-regexp\">/^I go to (.+)$/</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">page_name</span><span class=\"ruby-operator\">|</span>\n</pre>\n<p>step definition in web_steps.rb …\n"],["require_user_to_be_business!","ApplicationController","ApplicationController.html#method-i-require_user_to_be_business-21","()","<p>Method to protect data from non-business users Checks if user logged in and\nmajor is business Routes …\n"],["require_user_to_be_engineering!","ApplicationController","ApplicationController.html#method-i-require_user_to_be_engineering-21","()","<p>Method to protect data from non-engineering users Checks if user logged in\nand major is engineering  …\n"],["selector_for","HtmlSelectorsHelpers","HtmlSelectorsHelpers.html#method-i-selector_for","(locator)","<p>Maps a name to a selector. Used primarily by the\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">When</span> <span class=\"ruby-regexp\">/^(.+) within (.+)$/</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">step</span>, <span class=\"ruby-identifier\">scope</span><span class=\"ruby-operator\">|</span>\n</pre>\n<p>step definitions …\n"],["show","ProposalsController","ProposalsController.html#method-i-show","()","<p>Method to show specifci proposal\n<p>If user is business user, redirect to root if they don’t own it If\nengineering …\n"],["show","ReviewsController","ReviewsController.html#method-i-show","()","<p>Method to show individual review No protection on this method, when not\npaired to a proposal Review has …\n"],["sign_in","ControllerHelpers","ControllerHelpers.html#method-i-sign_in","(user = double('user'))",""],["test_homepage","BrowsingTest","BrowsingTest.html#method-i-test_homepage","()","<p>Refer to the documentation for all available options self.profile_options =\n{ :runs =&gt; 5, :metrics …\n"],["update","ProposalsController","ProposalsController.html#method-i-update","()","<p>Method to render update form for a specfic proposal\n<p>Parameters: Proposal ID\n<p>Validates user is logged in …\n"],["update","ReviewsController","ReviewsController.html#method-i-update","()","<p>Method to call update on review Renders form Validates calling user owns\nreview\n"],["user_has_no_review_here","ReviewsHelper","ReviewsHelper.html#method-i-user_has_no_review_here","(proposal_id)","<p>Function searches to determine if user has already written a review for the\ncurrent proposal\n<p>Parameters: …\n"],["user_is_business?","ApplicationController","ApplicationController.html#method-i-user_is_business-3F","()","<p>Method to determine if user is a business major\n<p>Returns: True if business Returns: False if not business …\n"],["user_is_engineering?","ApplicationController","ApplicationController.html#method-i-user_is_engineering-3F","()","<p>Method to determine if user is an engineering major\n<p>Returns: True if engineering student Returns: False …\n"],["user_is_owner_of_proposal?","ProposalsHelper","ProposalsHelper.html#method-i-user_is_owner_of_proposal-3F","(proposal_user_id)","<p>Method to validate current user own proposal and therefore has rights to\nmodify/delete proposal\n<p>Parameters: …\n"],["user_is_owner_of_review?","ReviewsHelper","ReviewsHelper.html#method-i-user_is_owner_of_review-3F","(review_user_id)","<p>Method to validate user is owner of review and therefore has permissions to\nmodify/delete\n<p>Parameters: …\n"],["with_scope","WithinHelpers","WithinHelpers.html#method-i-with_scope","(locator)",""],["Gemfile","","Gemfile.html","","<p>source ‘rubygems.org’\n<p>gem ‘rails’, ‘3.1.0’ gem ‘devise’, “ ~&gt; 2.2.8” gem “therubyracer” …\n"],["NotesToInstructor","","NotesToInstructor_rdoc.html","",""],["README","","README_rdoc.html","","<p>For auth portal, think about using one of the gems from this page:\nwww.ruby-toolbox.com/categories/rails_authentication …\n"],["Rakefile","","Rakefile.html","","<p>#!/usr/bin/env rake # Add your own tasks in files placed in lib/tasks\nending in .rake, # for example …\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"],["robots","","public/robots_txt.html","","<p>See www.robotstxt.org/wc/norobots.html for documentation on how to use the\nrobots.txt file\n<p>To ban all …\n"]]}}